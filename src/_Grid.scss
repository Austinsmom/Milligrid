.#{$rule-prefix}container {
	// Centered
	margin: 0 auto;
	position: relative;

	// Assume the user defined width if possible, fall back to using all available space
	max-width: $container-max-width;
	width: 100%;

	// Include a gutter
	padding: 0 $gutter-width;
}

.#{$rule-prefix}row {
	// No spacing, just a container
	padding: 0;
	margin: 0 0 0 0 - $gutter-width;

	// Display the content in rows
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;

	// Fill the parent container
	width: calc(100% + 2.0rem);

	// Vertically align items within the row
	&.#{$rule-prefix}row-top {
		align-items: flex-start;
	}
	&.#{$rule-prefix}row-bottom {
		align-items: flex-end;
	}
	&.#{$rule-prefix}row-center {
		align-items: center;
	}
	&.#{$rule-prefix}row-stretch {
		align-items: stretch;
	}
	&.#{$rule-prefix}row-baseline {
		align-items: baseline;
	}

	// Specification of the maximum number of items per row
	@for $i from 1 through $maximum-items-per-row {
		&.#{$rule-prefix}row-#{$i} {
			.#{$rule-prefix}column {
				min-width: percentage(1 / $i);
			}
		}
	}
}

.#{$rule-prefix}column {
	display: block;
	flex: 1;
	margin-left: 0;
	max-width: 100%;
	width: 100%;
	min-width: $container-max-width / $maximum-items-per-row;
	margin-bottom: 1.6rem;
	padding: 0 $gutter-width;

	// Vertical alignment
	.#{$rule-prefix}column-top {
		align-self: flex-start;
	}
	.#{$rule-prefix}column-bottom {
		align-self: flex-end;
	}
	.#{$rule-prefix}column-center {
		align-self: center;
	}

	@for $i from 1 through $maximum-items-per-row {
		$percent: percentage((1 / $maximum-items-per-row) * $i);
		&.#{$rule-prefix}column-wide-#{$i} {
			flex: 0 0 $percent;
			max-width: $percent;
		}
		&.#{$rule-prefix}column-offset-#{$i} {
			margin-left: $percent;
		}
	}
}

// Larger than mobile screen
@media (max-width: $columns-as-rows-threshold) {
	.#{$rule-prefix}row {
		flex-direction: column;
	}
}
